{"version":3,"file":"static/js/4871.e94e584f.chunk.js","mappings":"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","sources":["pages/admin-pages/products/AdminEditProducts.js","redux/actions/categoriesActions.js","../node_modules/@mui/icons-material/esm/AddBusiness.js"],"sourcesContent":["import { AddBusiness } from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  FormHelperText,\r\n  Grid,\r\n  MenuItem,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport DashboardHeader from \"components/navigation-components/DashboardHeader\";\r\nimport { CustomLink } from \"components/styled-components/CustomLink\";\r\nimport DropZone from \"components/styled-components/DropZone\";\r\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\r\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport { ADMIN_PRODUCTS } from \"navigation/CONSTANTS\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router\";\r\nimport { getAllCategories } from \"redux/actions/categoriesActions\";\r\nimport { getProduct, updateProduct } from \"redux/actions/productActions\";\r\nimport { storage } from \"services/utils\";\r\nimport { productSchema } from \"validations\";\r\n\r\nconst mapState = ({ productsData, categoriesData }) => ({\r\n  product: productsData.product,\r\n  loading: productsData.loading,\r\n  categories: categoriesData.categories,\r\n});\r\n\r\nconst AdminEditProducts = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { product, loading, categories } = useSelector(mapState);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [saving, setSaving] = useState(loading);\r\n\r\n  const { id } = useParams();\r\n  const {\r\n    image,\r\n    name,\r\n    qty,\r\n    price,\r\n    brand,\r\n    description,\r\n    category,\r\n    cost,\r\n    discount,\r\n  } = product;\r\n\r\n  const initialValues = {\r\n    image: Array.isArray(image) ? image[0] : image,\r\n    name: name,\r\n    qty: qty,\r\n    price: price,\r\n    brand: brand,\r\n    description: description,\r\n    category: category,\r\n    cost: cost,\r\n    discount: discount,\r\n  };\r\n\r\n  // handling file upload\r\n  const handleOnDrop = (file) => {\r\n    setUploading(true);\r\n    const imageFile = file[0];\r\n    const productRef = ref(storage, `products/${imageFile.name}`);\r\n\r\n    uploadBytes(productRef, imageFile).then((snapshot) => {\r\n      setUploading(false);\r\n\r\n      // setting file URL\r\n      getDownloadURL(productRef)\r\n        .then((url) => {\r\n          setImageUrl(url);\r\n        })\r\n        .catch((error) => {\r\n          switch (error.code) {\r\n            case \"storage/object-not-found\":\r\n              console.log(\"No object exists at the desired reference.\");\r\n              break;\r\n            case \"storage/bucket-not-found\":\r\n              console.log(\"No bucket is configured for Cloud Storage\");\r\n              break;\r\n            case \"storage/quota-exceeded\":\r\n              console.log(\r\n                \"Quota on your Cloud Storage bucket has been exceeded.\"\r\n              );\r\n              break;\r\n\r\n            default:\r\n              console.log(\"An error ocurred\");\r\n              break;\r\n          }\r\n        });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getProduct(id));\r\n    dispatch(getAllCategories());\r\n  }, [dispatch, id]);\r\n\r\n  const handleFormSubmit = (updatedProduct, { resetForm }) => {\r\n    const images = [];\r\n\r\n    if (imageUrl) {\r\n      images.push(imageUrl, updatedProduct.image);\r\n    } else {\r\n      images.push(updatedProduct.image);\r\n    }\r\n\r\n    delete updatedProduct.image;\r\n    updatedProduct.image = images;\r\n    updatedProduct._id = id;\r\n\r\n    dispatch(updateProduct(updatedProduct));\r\n    resetForm({});\r\n    navigate(ADMIN_PRODUCTS);\r\n  };\r\n\r\n  return (\r\n    product && (\r\n      <Fragment>\r\n        <DashboardHeader\r\n          title={`Edit Product ${id}`}\r\n          icon={AddBusiness}\r\n          button={\r\n            <CustomLink path={ADMIN_PRODUCTS}>\r\n              <Button variant=\"contained\" color=\"error\" sx={{ px: \"2rem\" }}>\r\n                Products List\r\n              </Button>\r\n            </CustomLink>\r\n          }\r\n        />\r\n        <Card sx={{ p: \"3rem\" }}>\r\n          {product && (\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={productSchema}\r\n              onSubmit={handleFormSubmit}\r\n            >\r\n              <Form>\r\n                <Grid container spacing={3}>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <Field\r\n                      name=\"name\"\r\n                      label=\"Product Name\"\r\n                      placeholder=\"Product Name\"\r\n                      fullWidth\r\n                      as={TextField}\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"name\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <Field\r\n                      name=\"category\"\r\n                      label=\"Select Category\"\r\n                      fullWidth\r\n                      select\r\n                      as={TextField}\r\n                    >\r\n                      {categories.map((category) => {\r\n                        const { name, status, _id } = category;\r\n                        return (\r\n                          <MenuItem value={name} key={_id}>\r\n                            {status && name}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Field>\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"category\"\r\n                    />\r\n                  </Grid>\r\n                  {imageUrl ? (\r\n                    <>\r\n                      <Grid item xs={8}>\r\n                        <Field\r\n                          as={DropZone}\r\n                          onDrop={handleOnDrop}\r\n                          name=\"image\"\r\n                        />\r\n                        <ErrorMessage\r\n                          component={FormHelperText}\r\n                          error={true}\r\n                          size=\"large\"\r\n                          sx={{ ml: 1 }}\r\n                          name=\"image\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Box>\r\n                          {uploading ? (\r\n                            <Typography variant=\"subtitle1\">\r\n                              Uploading...\r\n                            </Typography>\r\n                          ) : (\r\n                            <Typography\r\n                              component=\"img\"\r\n                              src={imageUrl ? imageUrl : product.image}\r\n                              alt=\"Upload Image\"\r\n                              sx={{\r\n                                width: \"100%\",\r\n                                height: 200,\r\n                                objectFit: \"contain\",\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Box>\r\n                      </Grid>\r\n                    </>\r\n                  ) : (\r\n                    <Grid item xs={12}>\r\n                      <Field as={DropZone} onDrop={handleOnDrop} name=\"image\" />\r\n                      <ErrorMessage\r\n                        component={FormHelperText}\r\n                        error={true}\r\n                        size=\"large\"\r\n                        sx={{ ml: 1 }}\r\n                        name=\"image\"\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n\r\n                  <Grid item xs={12}>\r\n                    <Field\r\n                      name=\"description\"\r\n                      label=\"Description\"\r\n                      placeholder=\"Description\"\r\n                      rows={6}\r\n                      multiline\r\n                      as={TextField}\r\n                      fullWidth\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"description\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={4} xs={12}>\r\n                    <Field\r\n                      name=\"qty\"\r\n                      label=\"Quantity in Stock\"\r\n                      placeholder=\"Stock\"\r\n                      as={TextField}\r\n                      fullWidth\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"qty\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={4} xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      name=\"brand\"\r\n                      label=\"Product Brand\"\r\n                      placeholder=\"Arshia\"\r\n                      fullWidth\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"brand\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={4} xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      name=\"cost\"\r\n                      label=\"Cost Price\"\r\n                      placeholder=\"Cost Price\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"cost\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      name=\"price\"\r\n                      label=\"Price\"\r\n                      placeholder=\"Price\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"price\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      name=\"discount\"\r\n                      label=\"Discount Amount\"\r\n                      placeholder=\"Discount Value\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                    />\r\n                    <ErrorMessage\r\n                      component={FormHelperText}\r\n                      error={true}\r\n                      size=\"large\"\r\n                      sx={{ ml: 1 }}\r\n                      name=\"discount\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} sx={{ justifyContent: \"center\" }}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      sx={{ mt: \"2rem\", mx: \"2rem\" }}\r\n                      disabled={saving}\r\n                    >\r\n                      {saving ? \"Saving...\" : \"Save Product\"}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      type=\"reset\"\r\n                      sx={{ mt: \"2rem\", mx: \"2rem\" }}\r\n                    >\r\n                      Clear Form\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </Formik>\r\n          )}\r\n        </Card>\r\n      </Fragment>\r\n    )\r\n  );\r\n};\r\n\r\nexport default AdminEditProducts;\r\n","import * as actions from \"redux/CONSTANTS\";\r\nimport * as api from \"api/index\";\r\n\r\n// Create a Category\r\nexport const createCategory = (categoryData) => async (dispatch) => {\r\n  dispatch({ type: actions.CATEGORY_CREATE_REQUEST, payload: categoryData });\r\n\r\n  try {\r\n    const { data } = await api.createCategory(categoryData);\r\n    dispatch({ type: actions.CATEGORY_CREATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: actions.CATEGORY_CREATE_ERROR, payload: error.message });\r\n  }\r\n};\r\n\r\n// Fetch All Categories\r\nexport const getAllCategories = () => async (dispatch) => {\r\n  dispatch({\r\n    type: actions.CATEGORIES_GET_REQUEST,\r\n  });\r\n\r\n  try {\r\n    const { data } = await api.getCategories();\r\n\r\n    dispatch({ type: actions.CATEGORIES_GET_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: actions.CATEGORIES_GET_ERROR, payload: error.message });\r\n  }\r\n};\r\n\r\n// Get A Single Category\r\nexport const getCategory = (id) => async (dispatch) => {\r\n  dispatch({ type: actions.CATEGORY_GET_REQUEST, payload: id });\r\n\r\n  try {\r\n    const { data } = await api.getCategory(id);\r\n    dispatch({ type: actions.CATEGORY_GET_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: actions.CATEGORY_GET_ERROR, payload: error.message });\r\n  }\r\n};\r\n\r\n// Update Category\r\nexport const updateCategory = (updatedData) => async (dispatch) => {\r\n  dispatch({ type: actions.CATEGORY_UPDATE_REQUEST, payload: updatedData });\r\n\r\n  try {\r\n    const { data } = await api.updateCategoryAPI(updatedData);\r\n    dispatch({ type: actions.CATEGORY_UPDATE_SUCCESS });\r\n\r\n    if (data) getAllCategories();\r\n  } catch (error) {\r\n    dispatch({ type: actions.CATEGORY_UPDATE_ERROR, payload: error.message });\r\n  }\r\n};\r\n\r\n// export const deleteCategoryStart = (categoryID) => ({\r\n//   type: actions.CATEGORY_DELETE_START,\r\n//   payload: categoryID,\r\n// });\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15 17h2v-3h1v-2l-1-5H2l-1 5v2h1v6h9v-6h4v3zm-6 1H4v-4h5v4zM2 4h15v2H2z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 18v-3h-2v3h-3v2h3v3h2v-3h3v-2z\"\n}, \"1\")], 'AddBusiness');"],"names":["mapState","productsData","categoriesData","product","loading","categories","dispatch","useDispatch","navigate","useNavigate","useSelector","useState","uploading","setUploading","imageUrl","setImageUrl","saving","id","useParams","image","name","qty","price","brand","description","category","cost","discount","initialValues","Array","isArray","handleOnDrop","file","imageFile","productRef","ref","storage","uploadBytes","then","snapshot","getDownloadURL","url","catch","error","code","console","log","useEffect","getProduct","getAllCategories","Fragment","title","icon","AddBusiness","button","path","ADMIN_PRODUCTS","variant","color","sx","px","p","validationSchema","productSchema","onSubmit","updatedProduct","resetForm","images","push","_id","updateProduct","container","spacing","item","sm","xs","label","placeholder","fullWidth","as","TextField","component","FormHelperText","size","ml","select","map","status","value","DropZone","onDrop","src","alt","width","height","objectFit","rows","multiline","type","justifyContent","mt","mx","disabled","createCategory","categoryData","actions","payload","api","data","message","getCategory","updateCategory","updatedData","createSvgIcon","_jsx","d"],"sourceRoot":""}